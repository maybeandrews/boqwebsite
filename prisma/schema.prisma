generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  deadline    DateTime
  tags        String[]
  boqs        BOQ[]
  quotes      Quote[]
  vendors     VendorProject[]
  performas   Performa[]      // Added relation to Performa
  groupName   String?         // Group name for project grouping
}

model Vendor {
  id        Int             @id @default(autoincrement())
  name      String
  contact   String
  approved  Boolean         @default(false)
  username  String          @unique
  password  String
  BOQ       BOQ[]
  quotes    Quote[]
  projects  VendorProject[]
  performas Performa[]      // Added relation to Performa
}

model VendorProject {
  id        Int     @id @default(autoincrement())
  vendorId  Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  vendor    Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, projectId])
}

model BOQ {
  id            Int      @id @default(autoincrement())
  projectId     Int
  fileName      String
  filePath      String
  vendorId      Int?
  category      String
  notes         String?
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  vendor        Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  items         BOQItem[]
}

model BOQItem {
  id         Int    @id @default(autoincrement())
  boqId      Int
  slNo       Int
  workDetail String
  amount     Float
  boq        BOQ    @relation(fields: [boqId], references: [id], onDelete: Cascade)
}

model Quote {
  id        Int         @id @default(autoincrement())
  vendorId  Int
  projectId Int
  fileName  String
  filePath  String
  status    QuoteStatus @default(PENDING)
  comments  String?
  value     Decimal?    @db.Decimal(10, 2)
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  vendor    Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

// New model for Performa uploads
model Performa {
  id              Int             @id @default(autoincrement())
  vendorId        Int
  projectId       Int
  fileName        String
  filePath        String          // S3 file path
  fileKey         String          // S3 object key
  fileSize        Int             // File size in bytes
  mimeType        String          // Document mime type
  uploadedAt      DateTime        @default(now())
  totalAmount     Decimal         @db.Decimal(12, 2)
  status          PerformaStatus  @default(PENDING)
  notes           String?
  category        String?         // Add this field if it doesn't exist
  validUntil      DateTime?       // Optional expiration date
  termsAccepted   Boolean         @default(false)
  
  // Relation fields
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  vendor          Vendor          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}


enum QuoteStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PerformaStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}